{"version":3,"sources":["config/redux/reducer/index.js","config/redux/store/index.js","config/firebase/index.js","containers/pages/Dashboard/index.js","config/redux/action/index.js","components/atoms/Button/index.js","components/atoms/Alert/index.js","containers/pages/Login/index.js","containers/pages/Register/index.js","containers/pages/App/index.js","serviceWorker.js","index.js"],"names":["initialState","isLogin","isLoading","user","userNotes","reducer","state","action","type","value","store","createStore","applyMiddleware","thunk","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Dasboard","title","content","isUpdate","nodeId","handleInputChange","e","preventDefault","setState","target","name","handleFormSubmit","props","saveDataAPI","updateDataAPI","history","date","Date","getTime","userDataLocal","JSON","parse","localStorage","getItem","push","data","uid","noteId","resetState","handleNoteUpdate","noteData","handleNoteDelete","noteid","stopPropagation","deleteDataAPI","this","getDataAPI","className","placeholder","onChange","onClick","length","map","note","key","Component","connect","dispatch","ref","addDataToAPI","apiEndPoint","Promise","resolve","reject","on","snapshot","val","Object","keys","getDataFromAPI","set","error","updateDataToAPI","remove","deleteDataFromAPI","Button","buttonColor","loading","Alert","handlePopupClosed","isAlertClosed","id","popupMessage","Login","email","password","handleChangeText","handleLoginSubmit","a","LoginAPI","handleAfterSubmit","message","handleAlertClose","isClosed","userData","stringify","setItem","disabled","auth","signInWithEmailAndPassword","then","result","dataUser","emailVerified","catch","errorMessage","actionLoginUserAPI","Register","handleRegisterSubmit","registerAPI","err","console","log","createUserWithEmailAndPassword","errorCode","code","actionRegisterUserAPI","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57e6e892.chunk.js","sourcesContent":["const initialState = {\n  isLogin: false,\n  isLoading: false,\n  user: {},\n  userNotes: {},\n};\n\nconst reducer = (state = initialState, action) => {\n  if (action.type === \"CHANGE_ISLOGIN\") {\n    return {\n      ...state,\n      isLogin: action.value,\n    };\n  }\n  if (action.type === \"CHANGE_USER\") {\n    return {\n      ...state,\n      user: action.value,\n    };\n  }\n  if (action.type === \"CHANGE_LOADING\") {\n    return {\n      ...state,\n      isLoading: action.value,\n    };\n  }\n  if (action.type === \"SET_NOTES\") {\n    return {\n      ...state,\n      userNotes: action.value,\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"../reducer\";\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDQPq6FTRyiFUBotlBDWMLZ4JshBMq7UDU\",\n  authDomain: \"simple-notes-firebase-848a7.firebaseapp.com\",\n  databaseURL: \"https://simple-notes-firebase-848a7.firebaseio.com\",\n  projectId: \"simple-notes-firebase-848a7\",\n  storageBucket: \"simple-notes-firebase-848a7.appspot.com\",\n  messagingSenderId: \"687823214905\",\n  appId: \"1:687823214905:web:53a8c1cd82bc1e1cb3f0e8\",\n  measurementId: \"G-RXT4ZNLYSW\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const database = firebase.database();\n\nexport default firebase;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  addDataToAPI,\n  getDataFromAPI,\n  updateDataToAPI,\n  deleteDataFromAPI,\n} from \"../../../config/redux/action\";\nimport \"./dashboard.scss\";\n\nclass Dasboard extends Component {\n  state = {\n    title: \"\",\n    content: \"\",\n    isUpdate: false,\n    nodeId: \"\",\n  };\n\n  handleInputChange = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleFormSubmit = () => {\n    const { title, content, isUpdate, nodeId } = this.state;\n    const { saveDataAPI, updateDataAPI, history } = this.props;\n    let date = new Date().getTime();\n    const userDataLocal = JSON.parse(localStorage.getItem(\"userData\"));\n\n    if (userDataLocal === null) {\n      history.push(\"/login\");\n    } else {\n      const data = {\n        title: title,\n        content: content,\n        date: date,\n        uid: userDataLocal.uid,\n      };\n\n      if (isUpdate) {\n        data.noteId = nodeId;\n        updateDataAPI(data);\n        this.resetState();\n      } else {\n        saveDataAPI(data);\n        this.resetState();\n      }\n    }\n  };\n\n  handleNoteUpdate = (noteData, noteId) => {\n    this.setState({\n      title: noteData.title,\n      content: noteData.content,\n      isUpdate: true,\n      nodeId: noteId,\n    });\n  };\n\n  handleNoteDelete = (e, noteid) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { deleteDataAPI, history } = this.props;\n\n    const userDataLocal = JSON.parse(localStorage.getItem(\"userData\"));\n    if (userDataLocal !== null) {\n      deleteDataAPI(userDataLocal.uid, noteid);\n    } else {\n      history.push(\"/login\");\n    }\n  };\n\n  resetState = () => {\n    this.setState({\n      title: \"\",\n      content: \"\",\n      isUpdate: false,\n      nodeId: \"\",\n    });\n  };\n\n  componentDidMount() {\n    const { getDataAPI, history } = this.props;\n\n    let userDataLocal = null;\n    userDataLocal = JSON.parse(localStorage.getItem(\"userData\"));\n\n    if (userDataLocal === null) {\n      history.push(\"/login\");\n    } else {\n      getDataAPI(userDataLocal.uid);\n    }\n  }\n\n  render() {\n    const { userNotes } = this.props;\n    const { title, content, isUpdate } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"input-form\">\n          <input\n            placeholder=\"title\"\n            className=\"input-title\"\n            value={title}\n            name=\"title\"\n            onChange={(e) => this.handleInputChange(e)}\n          />\n          <textarea\n            placeholder=\"content\"\n            className=\"input-content\"\n            value={content}\n            name=\"content\"\n            onChange={(e) => this.handleInputChange(e)}\n          />\n          <div className=\"btn-wrapper\">\n            {isUpdate ? (\n              <button className=\"cancel-btn\" onClick={this.resetState}>\n                Cancel\n              </button>\n            ) : null}\n            <button className=\"save-btn\" onClick={this.handleFormSubmit}>\n              {isUpdate ? \"Update\" : \"Simpan\"}\n            </button>\n          </div>\n        </div>\n\n        {userNotes.length > 0 ? (\n          <Fragment>\n            {userNotes.map((note) => (\n              <div\n                className=\"card-content\"\n                key={note.key}\n                onClick={() => this.handleNoteUpdate(note.data, note.key)}\n              >\n                <span\n                  className=\"close\"\n                  onClick={(e) => this.handleNoteDelete(e, note.key)}\n                >\n                  &times;\n                </span>\n                <p className=\"title\">{note.data.title}</p>\n                <p className=\"date\">{note.data.date}</p>\n                <p className=\"content\">{note.data.content}</p>\n              </div>\n            ))}\n          </Fragment>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userNotes: state.userNotes,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveDataAPI: (data) => dispatch(addDataToAPI(data)),\n  getDataAPI: (uid) => dispatch(getDataFromAPI(uid)),\n  updateDataAPI: (data) => dispatch(updateDataToAPI(data)),\n  deleteDataAPI: (uid, noteid) => dispatch(deleteDataFromAPI(uid, noteid)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dasboard);\n","import firebase, { database } from \"../../firebase\";\n\nexport const actionRegisterUserAPI = (data) => (dispatch) => {\n  return new Promise((resolve, reject) => {\n    dispatch({ type: \"CHANGE_LOADING\", value: true });\n\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(data.email, data.password)\n      .then((result) => {\n        console.log(\"register success: \", result);\n        dispatch({ type: \"CHANGE_LOADING\", value: false });\n        resolve(true);\n      })\n      .catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(errorCode, errorMessage);\n        dispatch({ type: \"CHANGE_LOADING\", value: false });\n        reject(false);\n      });\n  });\n};\n\nexport const actionLoginUserAPI = (data) => (dispatch) => {\n  return new Promise((resolve, reject) => {\n    dispatch({ type: \"CHANGE_LOADING\", value: true });\n\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(data.email, data.password)\n      .then((result) => {\n        const dataUser = {\n          email: result.user.email,\n          emailVerified: result.user.emailVerified,\n          uid: result.user.uid,\n        };\n        dispatch({ type: \"CHANGE_LOADING\", value: false });\n        dispatch({ type: \"CHANGE_ISLOGIN\", value: true });\n        dispatch({ type: \"CHANGE_USER\", value: dataUser });\n        resolve(true);\n      })\n      .catch(function (error) {\n        // Handle Errors here.\n        // Handle error from firebase: wrong password etc.\n        // var errorCode = error.code;\n        // console.log(errorCode, errorMessage);\n        var errorMessage = error.message;\n\n        dispatch({ type: \"CHANGE_LOADING\", value: false });\n        dispatch({ type: \"CHANGE_ISLOGIN\", value: false });\n        reject(errorMessage);\n      });\n  });\n};\n\nexport const addDataToAPI = (data) => (dispatch) => {\n  database.ref(\"notes/\" + data.uid).push({\n    title: data.title,\n    date: data.date,\n    content: data.content,\n  });\n};\n\nexport const updateDataToAPI = (data) => (dispatch) => {\n  let apiEndPoint = database.ref(`notes/${data.uid}/${data.noteId}`);\n\n  return new Promise((resolve, reject) => {\n    apiEndPoint.set(\n      {\n        title: data.title,\n        date: data.date,\n        content: data.content,\n      },\n      (error) => {\n        if (error) {\n          reject(false);\n        } else {\n          resolve(true);\n        }\n      }\n    );\n  });\n};\n\nexport const deleteDataFromAPI = (uid, noteid) => (dispatch) => {\n  let apiEndPoint = database.ref(`notes/${uid}/${noteid}`);\n  return new Promise((resolve, reject) => {\n    apiEndPoint.remove();\n  });\n};\n\nexport const getDataFromAPI = (uid) => (dispatch) => {\n  let apiEndPoint = database.ref(\"notes/\" + uid);\n\n  return new Promise((resolve, reject) => {\n    apiEndPoint.on(\"value\", function (snapshot) {\n      const userNotes = [];\n      if (snapshot.val() !== null) {\n        Object.keys(snapshot.val()).map((key) => {\n          return userNotes.push({\n            key: key,\n            data: snapshot.val()[key],\n          });\n        });\n        dispatch({ type: \"SET_NOTES\", value: userNotes });\n        resolve(userNotes);\n      }\n    });\n  });\n};\n","import React from \"react\";\n\nconst Button = ({ title, onClick, loading }) => {\n  let buttonColor = title === \"Register\" ? \"\" : \"login\";\n\n  if (loading) {\n    return (\n      <button className={\"btn disable \" + buttonColor} onClick={onClick}>\n        Loading ...\n      </button>\n    );\n  } else\n    return (\n      <button className={\"btn \" + buttonColor} onClick={onClick}>\n        {title}\n      </button>\n    );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./Alert.css\";\n\nclass Alert extends Component {\n  handlePopupClosed = () => {\n    this.props.isAlertClosed(true);\n  };\n\n  render() {\n    return (\n      <div id=\"popup1\" className=\"overlay\">\n        <div className=\"popup\">\n          <h2>Notification</h2>\n          <span className=\"close\" onClick={this.handlePopupClosed}>\n            &times;\n          </span>\n          <div className=\"content\">{this.props.popupMessage}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Alert;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"../../../components/atoms/Button\";\nimport { actionLoginUserAPI } from \"../../../config/redux/action\";\nimport \"../Register/register.scss\";\nimport Alert from \"../../../components/atoms/Alert\";\n\nclass Login extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    popupMessage: \"\",\n  };\n\n  handleChangeText = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleLoginSubmit = async () => {\n    const { email, password } = this.state;\n    const { LoginAPI } = this.props;\n\n    try {\n      const response = await LoginAPI({ email, password });\n\n      if (response) {\n        this.handleAfterSubmit(\"Login Success!\");\n      } else {\n        this.handleAfterSubmit(\"Login Failed!\");\n      }\n    } catch (errorFromFirebase) {\n      this.handleAfterSubmit(errorFromFirebase);\n    }\n  };\n\n  handleAfterSubmit = (message) => {\n    this.setState({\n      popupMessage: message,\n    });\n  };\n\n  handleAlertClose = (isClosed) => {\n    const { history } = this.props;\n\n    if (isClosed) {\n      this.setState({\n        email: \"\",\n        password: \"\",\n        popupMessage: \"\",\n      });\n    }\n    // redirect\n    if (this.props.isLogin) {\n      let userData = JSON.stringify(this.props.user);\n      localStorage.setItem(\"userData\", userData);\n      history.push(\"/\");\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.popupMessage !== \"\" ? (\n          <Alert\n            popupMessage={this.state.popupMessage}\n            isAlertClosed={(isClosed) => this.handleAlertClose(isClosed)}\n          />\n        ) : null}\n        <div className=\"auth-container\">\n          <div className=\"auth-card\">\n            <p className=\"auth-title\">Login Page</p>\n            <input\n              name=\"email\"\n              className=\"input\"\n              placeholder=\"Email\"\n              value={this.state.email}\n              type=\"text\"\n              onChange={this.handleChangeText}\n              disabled={this.props.isLoading}\n            />\n            <input\n              name=\"password\"\n              className=\"input\"\n              placeholder=\"Password\"\n              type=\"password\"\n              value={this.state.password}\n              onChange={this.handleChangeText}\n              disabled={this.props.isLoading}\n            />\n            <Button\n              onClick={this.handleLoginSubmit}\n              title={\"Login\"}\n              loading={this.props.isLoading}\n            />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.isLoading,\n  isLogin: state.isLogin,\n  user: state.user,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  LoginAPI: (data) => dispatch(actionLoginUserAPI(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"../../../components/atoms/Button\";\nimport { actionRegisterUserAPI } from \"../../../config/redux/action\";\nimport \"./register.scss\";\n\nclass Register extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n  };\n\n  handleChangeText = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleRegisterSubmit = async () => {\n    const { email, password } = this.state;\n\n    const response = this.props\n      .registerAPI({ email, password })\n      .catch((err) => err);\n\n    if (response) {\n      console.log(\"Register success!\");\n    } else {\n      console.log(\"Register failed!\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"auth-container\">\n        <div className=\"auth-card\">\n          <p className=\"auth-title\">Register Page</p>\n          <input\n            name=\"email\"\n            className=\"input\"\n            placeholder=\"Email\"\n            type=\"text\"\n            onChange={this.handleChangeText}\n            disabled={this.props.isLoading}\n          />\n          <input\n            name=\"password\"\n            className=\"input\"\n            placeholder=\"Password\"\n            type=\"password\"\n            onChange={this.handleChangeText}\n            disabled={this.props.isLoading}\n          />\n          <Button\n            onClick={this.handleRegisterSubmit}\n            title={\"Register\"}\n            loading={this.props.isLoading}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  registerAPI: (data) => dispatch(actionRegisterUserAPI(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"../../../config/redux\";\nimport Dasboard from \"../Dashboard\";\nimport Login from \"../Login\";\nimport Register from \"../Register\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Route path=\"/\" exact component={Dasboard} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}